{"ast":null,"code":"var _jsxFileName = \"/Users/zainabanidomi/Desktop/Hangman-Guessing-Game/frontend/src/pages/GamePage.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { Container } from \"react-bootstrap\";\nimport { useParams } from \"react-router-dom\";\nimport GamePageLoggedOutView from \"../components/GamePageLoggedOutView\";\nimport styleUtils from \"../styles/utils.module.css\";\nimport Figure from \"../components/Figure\";\nimport Word from \"../components/Word\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nlet isActive = true;\nconst correctLetters = [];\nconst wrongLetters = [];\nexport default function GamePage(_ref) {\n  _s();\n  let {\n    loggedInUser\n  } = _ref;\n  const {\n    wordLength\n  } = useParams();\n  const wordLengthVal = parseInt(wordLength);\n  const [randomWord, setRandomWord] = useState([]);\n  // const [pinGuesses, setPinGuesses] = useState(Array(wordLengthVal).fill('')); // for the guesses\n  const [pinCodes, setPinCodes] = useState(Array(wordLengthVal).fill([])); //for the result\n  const [isActive, setIsActive] = useState(true);\n  const [correctLetters, setCorrectLetters] = useState([]);\n  const [worngLetters, setWrongLetters] = useState([]);\n  const API_URL = `https://api.datamuse.com/words?sp=${\"?\".repeat(wordLengthVal)}&max=1000`;\n  const generateRandomWord = async () => {\n    try {\n      const response = await fetch(API_URL);\n      if (response.ok) {\n        const data = await response.json();\n        const randomIndex = Math.floor(Math.random() * data.length);\n        const randomWord = data[randomIndex].word; // Access the word property of the randomly selected index\n        setRandomWord(randomWord);\n        console.log(randomWord);\n      } else {\n        throw new Error(\"Failed to fetch random word\");\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  useEffect(() => {\n    generateRandomWord();\n  }, []);\n\n  // const handleCharSelect = (char: string, index: any) => {\n  //   const updatedPinCodes = [...pinCodes];\n  //   updatedPinCodes[index] = char;\n  //   setPinCodes(updatedPinCodes);\n  // };\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: loggedInUser ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styleUtils.gameContainer,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: styleUtils.title,\n            children: /*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \" Hangman \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n            className: styleUtils.center,\n            children: [\" \", \"Guess the word - Enter a letter\", \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Word, {\n            selectedWord: randomWord,\n            correctLetters: correctLetters\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Figure, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styleUtils.title,\n            children: /*#__PURE__*/_jsxDEV(\"h6\", {\n              children: \" Guesses left : \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 92,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 13\n        }, this)\n      }, void 0, false) : /*#__PURE__*/_jsxDEV(GamePageLoggedOutView, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 11\n      }, this)\n    }, void 0, false)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n}\n_s(GamePage, \"A405rrAFnmq+KR42ON3biP+GDvY=\", false, function () {\n  return [useParams];\n});\n_c = GamePage;\nvar _c;\n$RefreshReg$(_c, \"GamePage\");","map":{"version":3,"names":["React","useEffect","useState","Container","useParams","GamePageLoggedOutView","styleUtils","Figure","Word","jsxDEV","_jsxDEV","Fragment","_Fragment","isActive","correctLetters","wrongLetters","GamePage","_ref","_s","loggedInUser","wordLength","wordLengthVal","parseInt","randomWord","setRandomWord","pinCodes","setPinCodes","Array","fill","setIsActive","setCorrectLetters","worngLetters","setWrongLetters","API_URL","repeat","generateRandomWord","response","fetch","ok","data","json","randomIndex","Math","floor","random","length","word","console","log","Error","error","children","className","gameContainer","title","fileName","_jsxFileName","lineNumber","columnNumber","center","selectedWord","_c","$RefreshReg$"],"sources":["/Users/zainabanidomi/Desktop/Hangman-Guessing-Game/frontend/src/pages/GamePage.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Button, Container } from \"react-bootstrap\";\nimport { useParams } from \"react-router-dom\";\nimport GamePageLoggedOutView from \"../components/GamePageLoggedOutView\";\nimport { HomePageProps } from \"../components/types\";\nimport styleUtils from \"../styles/utils.module.css\";\nimport Alphabet from \"../components/Alphabet\";\nimport Figure from \"../components/Figure\";\nimport Word from \"../components/Word\";\n\ninterface RouteParams {\n  wordLength: string;\n}\n\nlet isActive = true;\nconst correctLetters = [];\nconst wrongLetters = [];\n\nexport default function GamePage({ loggedInUser }: HomePageProps) {\n  const { wordLength } = useParams() as unknown as RouteParams;\n  const wordLengthVal = parseInt(wordLength);\n  const [randomWord, setRandomWord] = useState([]);\n  // const [pinGuesses, setPinGuesses] = useState(Array(wordLengthVal).fill('')); // for the guesses\n  const [pinCodes, setPinCodes] = useState(Array(wordLengthVal).fill([])); //for the result\n  const [isActive, setIsActive] = useState(true);\n  const [correctLetters, setCorrectLetters] = useState([]);\n  const [worngLetters, setWrongLetters] = useState([]);\n  const API_URL = `https://api.datamuse.com/words?sp=${\"?\".repeat(\n    wordLengthVal\n  )}&max=1000`;\n\n  const generateRandomWord = async () => {\n    try {\n      const response = await fetch(API_URL);\n      if (response.ok) {\n        const data = await response.json();\n        const randomIndex = Math.floor(Math.random() * data.length);\n        const randomWord = data[randomIndex].word; // Access the word property of the randomly selected index\n        setRandomWord(randomWord);\n        console.log(randomWord);\n      } else {\n        throw new Error(\"Failed to fetch random word\");\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  useEffect(() => {\n    generateRandomWord();\n  }, []);\n\n  // const handleCharSelect = (char: string, index: any) => {\n  //   const updatedPinCodes = [...pinCodes];\n  //   updatedPinCodes[index] = char;\n  //   setPinCodes(updatedPinCodes);\n  // };\n\n  return (\n    <Container>\n      <>\n        {loggedInUser ? (\n          <>\n            <div className={styleUtils.gameContainer}>\n              <div className={styleUtils.title}>\n                <h3> Hangman </h3>\n              </div>\n              <h5 className={styleUtils.center}>\n                {\" \"}\n                Guess the word - Enter a letter{\" \"}\n              </h5>\n              <Word selectedWord={randomWord} correctLetters={correctLetters} />\n              <Figure />\n\n              {/* <div className={styleUtils.pinCodeInput}>\n\n{pinCodes?.map((pinCode,index) => (\n   <input\n    key={index}\n    type=\"text\"\n    className={styleUtils.pinInput}\n    maxLength={1}\n    value={pinCode} \n    disabled={true} \n    \n  />\n))}\n\n      </div> */}\n\n              <div className={styleUtils.title}>\n                <h6> Guesses left : </h6>\n              </div>\n            </div>\n\n            {/* <Alphabet onCharSelect={(char: string,index?:number) => handleCharSelect(char,index)} /> */}\n          </>\n        ) : (\n          <GamePageLoggedOutView />\n        )}\n      </>\n    </Container>\n  );\n}\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAAiBC,SAAS,QAAQ,iBAAiB;AACnD,SAASC,SAAS,QAAQ,kBAAkB;AAC5C,OAAOC,qBAAqB,MAAM,qCAAqC;AAEvE,OAAOC,UAAU,MAAM,4BAA4B;AAEnD,OAAOC,MAAM,MAAM,sBAAsB;AACzC,OAAOC,IAAI,MAAM,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAMtC,IAAIC,QAAQ,GAAG,IAAI;AACnB,MAAMC,cAAc,GAAG,EAAE;AACzB,MAAMC,YAAY,GAAG,EAAE;AAEvB,eAAe,SAASC,QAAQA,CAAAC,IAAA,EAAkC;EAAAC,EAAA;EAAA,IAAjC;IAAEC;EAA4B,CAAC,GAAAF,IAAA;EAC9D,MAAM;IAAEG;EAAW,CAAC,GAAGhB,SAAS,CAAC,CAA2B;EAC5D,MAAMiB,aAAa,GAAGC,QAAQ,CAACF,UAAU,CAAC;EAC1C,MAAM,CAACG,UAAU,EAAEC,aAAa,CAAC,GAAGtB,QAAQ,CAAC,EAAE,CAAC;EAChD;EACA,MAAM,CAACuB,QAAQ,EAAEC,WAAW,CAAC,GAAGxB,QAAQ,CAACyB,KAAK,CAACN,aAAa,CAAC,CAACO,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;EACzE,MAAM,CAACf,QAAQ,EAAEgB,WAAW,CAAC,GAAG3B,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM,CAACY,cAAc,EAAEgB,iBAAiB,CAAC,GAAG5B,QAAQ,CAAC,EAAE,CAAC;EACxD,MAAM,CAAC6B,YAAY,EAAEC,eAAe,CAAC,GAAG9B,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM+B,OAAO,GAAI,qCAAoC,GAAG,CAACC,MAAM,CAC7Db,aACF,CAAE,WAAU;EAEZ,MAAMc,kBAAkB,GAAG,MAAAA,CAAA,KAAY;IACrC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACJ,OAAO,CAAC;MACrC,IAAIG,QAAQ,CAACE,EAAE,EAAE;QACf,MAAMC,IAAI,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;QAClC,MAAMC,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGL,IAAI,CAACM,MAAM,CAAC;QAC3D,MAAMtB,UAAU,GAAGgB,IAAI,CAACE,WAAW,CAAC,CAACK,IAAI,CAAC,CAAC;QAC3CtB,aAAa,CAACD,UAAU,CAAC;QACzBwB,OAAO,CAACC,GAAG,CAACzB,UAAU,CAAC;MACzB,CAAC,MAAM;QACL,MAAM,IAAI0B,KAAK,CAAC,6BAA6B,CAAC;MAChD;IACF,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdH,OAAO,CAACG,KAAK,CAACA,KAAK,CAAC;IACtB;EACF,CAAC;EAEDjD,SAAS,CAAC,MAAM;IACdkC,kBAAkB,CAAC,CAAC;EACtB,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA;EACA;EACA;EACA;;EAEA,oBACEzB,OAAA,CAACP,SAAS;IAAAgD,QAAA,eACRzC,OAAA,CAAAE,SAAA;MAAAuC,QAAA,EACGhC,YAAY,gBACXT,OAAA,CAAAE,SAAA;QAAAuC,QAAA,eACEzC,OAAA;UAAK0C,SAAS,EAAE9C,UAAU,CAAC+C,aAAc;UAAAF,QAAA,gBACvCzC,OAAA;YAAK0C,SAAS,EAAE9C,UAAU,CAACgD,KAAM;YAAAH,QAAA,eAC/BzC,OAAA;cAAAyC,QAAA,EAAI;YAAS;cAAAI,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACf,CAAC,eACNhD,OAAA;YAAI0C,SAAS,EAAE9C,UAAU,CAACqD,MAAO;YAAAR,QAAA,GAC9B,GAAG,EAAC,iCAC0B,EAAC,GAAG;UAAA;YAAAI,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACjC,CAAC,eACLhD,OAAA,CAACF,IAAI;YAACoD,YAAY,EAAErC,UAAW;YAACT,cAAc,EAAEA;UAAe;YAAAyC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,eAClEhD,OAAA,CAACH,MAAM;YAAAgD,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,eAkBVhD,OAAA;YAAK0C,SAAS,EAAE9C,UAAU,CAACgD,KAAM;YAAAH,QAAA,eAC/BzC,OAAA;cAAAyC,QAAA,EAAI;YAAgB;cAAAI,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACtB,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH;MAAC,gBAGN,CAAC,gBAEHhD,OAAA,CAACL,qBAAqB;QAAAkD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IACzB,gBACD;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACM,CAAC;AAEhB;AAACxC,EAAA,CArFuBF,QAAQ;EAAA,QACPZ,SAAS;AAAA;AAAAyD,EAAA,GADV7C,QAAQ;AAAA,IAAA6C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"/Users/zainabanidomi/Desktop/Hangman-Guessing-Game/frontend/src/pages/GamePage.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Container } from 'react-bootstrap';\nimport { useParams } from 'react-router-dom';\nimport GamePageLoggedOutView from '../components/GamePageLoggedOutView';\nimport styleUtils from '../styles/utils.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function GamePage(_ref) {\n  _s();\n  let {\n    loggedInUser\n  } = _ref;\n  const {\n    wordLength\n  } = useParams();\n  const wordLengthVal = parseInt(wordLength);\n  const [randomWord, setRandomWord] = useState([]);\n  const [pinCodes, setPinCodes] = useState(Array(wordLengthVal).fill(''));\n  const [msg, setMsg] = useState(\"\");\n  const API_URL = `https://api.datamuse.com/words?sp=${\"?\".repeat(wordLengthVal)}&max=1000`;\n  const generateRandomWord = async () => {\n    try {\n      const response = await fetch(API_URL);\n      if (response.ok) {\n        const data = await response.json();\n        const randomIndex = Math.floor(Math.random() * data.length);\n        const randomWord = data[randomIndex].word; // Access the word property of the randomly selected index\n\n        const newGame = G({\n          wordLength: wordLengthVal,\n          word: randomWord,\n          guesses: '',\n          correctGuesses: '',\n          incorrectGuesses: '',\n          remainingGuesses: '',\n          isActive: true,\n          userId: '' // Replace with the actual user ID associated with the game\n        });\n\n        await newGame.save();\n        setRandomWord(randomWord);\n        console.log(randomWord);\n      } else {\n        throw new Error('Failed to fetch random word');\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  useEffect(() => {\n    generateRandomWord();\n  }, []);\n\n  // const generateRandomWord = () => {\n  //   const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  //   let generatedWord = '';\n  //   for (let i = 0; i < wordLengthVal; i++) {\n  //     const randomIndex = Math.floor(Math.random() * alphabet.length);\n  //     generatedWord += alphabet[randomIndex];\n  //   }\n  //   setRandomWord(generatedWord);\n  // };\n\n  const handlePinCodeChange = _ref2 => {\n    let {\n      index,\n      event\n    } = _ref2;\n    const newPinCodes = [...pinCodes];\n    newPinCodes[index] = event.target.value;\n    setPinCodes(newPinCodes);\n    if (index < wordLengthVal - 1) {\n      event.target.nextSibling.focus();\n    }\n    if (newPinCodes[index] === randomWord[index]) {\n      setMsg('right!');\n    } else {\n      setMsg('wrong!');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: loggedInUser ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styleUtils.title,\n          children: /*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \" Please type your guesses :\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 42\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 8\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styleUtils.pinCodeInput,\n          children: pinCodes.map((pinCode, index) => /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: styleUtils.pinInput,\n            maxLength: 1,\n            value: pinCode,\n            onChange: event => handlePinCodeChange({\n              index,\n              event\n            }),\n            tabIndex: index + 1 // Set the tabIndex to enable focusing with keyboard navigation\n            ,\n            autoFocus: index === 0 // Set autoFocus for the first input box\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 12\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n          className: styleUtils.center,\n          children: [\"Your guesses : \", pinCodes, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n          className: styleUtils.center,\n          children: [\"Your Progress : \", msg, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n          className: styleUtils.center,\n          children: [\"Random word : \", randomWord, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styleUtils.generateButton\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(GamePageLoggedOutView, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this)\n    }, void 0, false)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n}\n_s(GamePage, \"T5ZrMkRsk9W0XtMYJR6IOXmA9lw=\", false, function () {\n  return [useParams];\n});\n_c = GamePage;\nvar _c;\n$RefreshReg$(_c, \"GamePage\");","map":{"version":3,"names":["React","useEffect","useState","Container","useParams","GamePageLoggedOutView","styleUtils","jsxDEV","_jsxDEV","Fragment","_Fragment","GamePage","_ref","_s","loggedInUser","wordLength","wordLengthVal","parseInt","randomWord","setRandomWord","pinCodes","setPinCodes","Array","fill","msg","setMsg","API_URL","repeat","generateRandomWord","response","fetch","ok","data","json","randomIndex","Math","floor","random","length","word","newGame","G","guesses","correctGuesses","incorrectGuesses","remainingGuesses","isActive","userId","save","console","log","Error","error","handlePinCodeChange","_ref2","index","event","newPinCodes","target","value","nextSibling","focus","children","className","fileName","_jsxFileName","lineNumber","columnNumber","title","pinCodeInput","map","pinCode","type","pinInput","maxLength","onChange","tabIndex","autoFocus","center","generateButton","_c","$RefreshReg$"],"sources":["/Users/zainabanidomi/Desktop/Hangman-Guessing-Game/frontend/src/pages/GamePage.tsx"],"sourcesContent":["import React, { useEffect, useState, } from 'react'\nimport { Button, Container } from 'react-bootstrap'\nimport { useParams } from 'react-router-dom';\nimport GamePageLoggedOutView from '../components/GamePageLoggedOutView'\nimport { HomePageProps } from '../components/types'\nimport styleUtils from '../styles/utils.module.css';\nimport Game from '../../../backend/src/model/game';\n\ninterface RouteParams {\n  wordLength: string;\n}\n\nexport default function GamePage({loggedInUser}:HomePageProps) {\n\n  const { wordLength } = useParams() as unknown as RouteParams;\n  const wordLengthVal = parseInt(wordLength);\n  const [randomWord, setRandomWord] = useState([]);\n  const [pinCodes, setPinCodes] = useState(Array(wordLengthVal).fill(''));\n  const [msg, setMsg] = useState(\"\");\n\n\n  const API_URL = `https://api.datamuse.com/words?sp=${\"?\".repeat(wordLengthVal)}&max=1000`;\n  \n  const generateRandomWord = async () => {\n    try {\n      const response = await fetch(API_URL);\n      if (response.ok) {\n        const data = await response.json();\n        const randomIndex = Math.floor(Math.random() * data.length);\n        const randomWord = data[randomIndex].word; // Access the word property of the randomly selected index\n       \n        const newGame = G({\n          wordLength: wordLengthVal,\n          word: randomWord,\n          guesses: '',\n          correctGuesses: '',\n          incorrectGuesses: '',\n          remainingGuesses: '',\n          isActive: true,\n          userId: '', // Replace with the actual user ID associated with the game\n        });\n  \n        await newGame.save(); \n      \n\n        setRandomWord(randomWord);\n        console.log(randomWord);\n      } else {\n        throw new Error('Failed to fetch random word');\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  useEffect(() => {\n    generateRandomWord();\n  },[]);\n\n  // const generateRandomWord = () => {\n  //   const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  //   let generatedWord = '';\n  //   for (let i = 0; i < wordLengthVal; i++) {\n  //     const randomIndex = Math.floor(Math.random() * alphabet.length);\n  //     generatedWord += alphabet[randomIndex];\n  //   }\n  //   setRandomWord(generatedWord);\n  // };\n\n  const handlePinCodeChange = ({index, event}:any) => {\n\n    const newPinCodes = [...pinCodes];\n    newPinCodes[index] = event.target.value;\n    setPinCodes(newPinCodes);\n\n    if (index < wordLengthVal  - 1) {\n      event.target.nextSibling.focus();\n    }\n\n    if(newPinCodes[index] === randomWord[index]){\n      setMsg('right!');\n    }else{\n      setMsg('wrong!');\n    }\n    \n\n  };\n\n  return (    \n\n    <Container >\n    <>\n    {\n      loggedInUser  \n      ?<>\n      <input className='' ></input>\n       <div className={styleUtils.title}><h4> Please type your guesses :</h4></div>\n      <div className={styleUtils.pinCodeInput}>\n        {pinCodes.map((pinCode, index) => (\n           <input\n            key={index}\n            type=\"text\"\n            className={styleUtils.pinInput}\n            maxLength={1}\n            value={pinCode}\n            onChange={(event) => handlePinCodeChange({index, event})}\n            tabIndex={index + 1} // Set the tabIndex to enable focusing with keyboard navigation\n            autoFocus={index === 0} // Set autoFocus for the first input box\n\n          />\n        ))}\n      </div>\n      <h5 className={styleUtils.center}>Your guesses : {pinCodes} </h5>\n      <h5 className={styleUtils.center}>Your Progress : {msg} </h5>\n      <h5 className={styleUtils.center}>Random word : {randomWord} </h5>\n      \n      <div className={styleUtils.generateButton}>\n      {/* <Button \n      className={styleUtils.buttonStyle} \n       onClick={generateRandomWord}\n       > Generate\n      </Button> */}\n      </div>\n\n      </> \n      : <GamePageLoggedOutView /> \n    }\n    </>\n    </Container>\n  )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
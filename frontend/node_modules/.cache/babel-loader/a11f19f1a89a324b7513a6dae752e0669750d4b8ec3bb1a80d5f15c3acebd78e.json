{"ast":null,"code":"var _jsxFileName = \"/Users/zainabanidomi/Desktop/Hangman-Guessing-Game/frontend/src/pages/GamePage.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { Container } from \"react-bootstrap\";\nimport { useParams } from \"react-router-dom\";\nimport GamePageLoggedOutView from \"../components/GamePageLoggedOutView\";\nimport styleUtils from \"../styles/utils.module.css\";\nimport Figure from \"../components/Figure\";\nimport Word from \"../components/Word\";\nimport WrongLetters from \"../components/WrongLetters\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n// interface Letter{\n//   letter : string;\n// }\n\n// let isActive = true;\n// const correctLetters = [];\n// const wrongLetters = [];\nexport default function GamePage(_ref) {\n  _s();\n  let {\n    loggedInUser\n  } = _ref;\n  const {\n    wordLength\n  } = useParams();\n  const wordLengthVal = parseInt(wordLength);\n  const [randomWord, setRandomWord] = useState([]);\n  const [isActive, setIsActive] = useState(true);\n  const [correctLetters, setCorrectLetters] = useState([]);\n  const [wrongLetters, setWrongLetters] = useState([]);\n  const API_URL = `https://api.datamuse.com/words?sp=${\"?\".repeat(wordLengthVal)}&max=1000`;\n  const generateRandomWord = async () => {\n    try {\n      const response = await fetch(API_URL);\n      if (response.ok) {\n        const data = await response.json();\n        const randomIndex = Math.floor(Math.random() * data.length);\n        const randomWord = data[randomIndex].word; // Access the word property of the randomly selected index\n        setRandomWord(randomWord);\n        console.log(randomWord);\n      } else {\n        throw new Error(\"Failed to fetch random word\");\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  useEffect(() => {\n    generateRandomWord();\n  }, []);\n  useEffect(() => {\n    const handleKeydown = event => {\n      const {\n        key,\n        keyCode\n      } = event;\n      if (isActive && keyCode >= 65 && keyCode <= 90) {\n        const letter = String(key.toLowerCase());\n        if (randomWord.includes(letter)) {\n          if (!correctLetters.includes(letter)) {\n            setCorrectLetters(currentLetters => [...currentLetters, letter]);\n          } else {\n            // show(setShowNotification);\n          }\n        } else {\n          if (!wrongLetters.includes(letter)) {\n            setWrongLetters(currentLetters => [...currentLetters, letter]);\n          } else {\n            // show(setShowNotification);\n          }\n        }\n      }\n    };\n    window.addEventListener('keydown', handleKeydown);\n    return () => window.removeEventListener('keydown', handleKeydown);\n  }, [correctLetters, wrongLetters, isActive]);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: loggedInUser ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styleUtils.gameContainer,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: styleUtils.title,\n            children: /*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \" Hangman \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n            className: styleUtils.center,\n            children: [\" \", \"Guess the word - Enter a letter\", \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Figure, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(WrongLetters, {\n            wrongLetters: wrongLetters\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styleUtils.title,\n            children: /*#__PURE__*/_jsxDEV(Word, {\n              selectedWord: randomWord,\n              correctLetters: correctLetters\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 13\n        }, this)\n      }, void 0, false) : /*#__PURE__*/_jsxDEV(GamePageLoggedOutView, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 11\n      }, this)\n    }, void 0, false)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n}\n_s(GamePage, \"f0Hb1ezD/w0LjEFzZshKxcc4Mlc=\", false, function () {\n  return [useParams];\n});\n_c = GamePage;\nvar _c;\n$RefreshReg$(_c, \"GamePage\");","map":{"version":3,"names":["React","useEffect","useState","Container","useParams","GamePageLoggedOutView","styleUtils","Figure","Word","WrongLetters","jsxDEV","_jsxDEV","Fragment","_Fragment","GamePage","_ref","_s","loggedInUser","wordLength","wordLengthVal","parseInt","randomWord","setRandomWord","isActive","setIsActive","correctLetters","setCorrectLetters","wrongLetters","setWrongLetters","API_URL","repeat","generateRandomWord","response","fetch","ok","data","json","randomIndex","Math","floor","random","length","word","console","log","Error","error","handleKeydown","event","key","keyCode","letter","String","toLowerCase","includes","currentLetters","window","addEventListener","removeEventListener","children","className","gameContainer","title","fileName","_jsxFileName","lineNumber","columnNumber","center","selectedWord","_c","$RefreshReg$"],"sources":["/Users/zainabanidomi/Desktop/Hangman-Guessing-Game/frontend/src/pages/GamePage.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Button, Container } from \"react-bootstrap\";\nimport { useParams } from \"react-router-dom\";\nimport GamePageLoggedOutView from \"../components/GamePageLoggedOutView\";\nimport { HomePageProps } from \"../components/types\";\nimport styleUtils from \"../styles/utils.module.css\";\nimport Figure from \"../components/Figure\";\nimport Word from \"../components/Word\";\nimport WrongLetters from \"../components/WrongLetters\";\n\ninterface RouteParams {\n  wordLength: string;\n}\n\n// interface Letter{\n//   letter : string;\n// }\n\n// let isActive = true;\n// const correctLetters = [];\n// const wrongLetters = [];\n\nexport default function GamePage({ loggedInUser }: HomePageProps) {\n  const { wordLength } = useParams() as unknown as RouteParams;\n  const wordLengthVal = parseInt(wordLength);\n  const [randomWord, setRandomWord] = useState([]);\n  const [isActive, setIsActive] = useState(true);\n  const [correctLetters, setCorrectLetters] = useState([]);\n  const [wrongLetters, setWrongLetters] = useState([]);\n  const API_URL = `https://api.datamuse.com/words?sp=${\"?\".repeat(wordLengthVal)}&max=1000`;\n\n  const generateRandomWord = async () => {\n    try {\n      const response = await fetch(API_URL);\n      if (response.ok) {\n        const data = await response.json();\n        const randomIndex = Math.floor(Math.random() * data.length);\n        const randomWord = data[randomIndex].word; // Access the word property of the randomly selected index\n        setRandomWord(randomWord);\n        console.log(randomWord);\n      } else {\n        throw new Error(\"Failed to fetch random word\");\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  useEffect(() => {\n    generateRandomWord();\n  }, []);\n\n\n  useEffect(() => {\n    const handleKeydown = (event:any) => {\n      const { key, keyCode } = event;\n      if (isActive && keyCode >= 65 && keyCode <= 90) {\n\n        const letter:string[]= String(key.toLowerCase());\n        if (randomWord.includes(letter)) {\n          if (!correctLetters.includes(letter)) {\n            setCorrectLetters(currentLetters => [...currentLetters, letter]);\n          } else {\n            // show(setShowNotification);\n          }\n        } else {\n          if (!wrongLetters.includes(letter)) {\n            setWrongLetters(currentLetters => [...currentLetters, letter]);\n          } else {\n            // show(setShowNotification);\n          }\n        }\n      }\n    }\n    window.addEventListener('keydown', handleKeydown);\n\n    return () => window.removeEventListener('keydown', handleKeydown);\n  }, [correctLetters, wrongLetters, isActive]);\n\n\n\n  return (\n    <Container>\n      <>\n        {loggedInUser ? (\n          <>\n            <div className={styleUtils.gameContainer}>\n              <div className={styleUtils.title}>\n                <h3> Hangman </h3>\n              </div>\n              <h5 className={styleUtils.center}>\n                {\" \"}\n                Guess the word - Enter a letter{\" \"}\n              </h5>\n              <Figure />\n              <WrongLetters wrongLetters={wrongLetters}/>\n              <div className={styleUtils.title}>\n              <Word selectedWord={randomWord} correctLetters={correctLetters} />\n                {/* <h6> Guesses left : </h6> */}\n              </div>\n            </div>\n\n            {/* <Alphabet onCharSelect={(char: string,index?:number) => handleCharSelect(char,index)} /> */}\n          </>\n        ) : (\n          <GamePageLoggedOutView />\n        )}\n      </>\n    </Container>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
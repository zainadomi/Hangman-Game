{"ast":null,"code":"var _jsxFileName = \"/Users/zainabanidomi/Desktop/Hangman-Guessing-Game/frontend/src/pages/GamePage.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Container } from 'react-bootstrap';\nimport { useParams } from 'react-router-dom';\nimport GamePageLoggedOutView from '../components/GamePageLoggedOutView';\nimport styleUtils from '../styles/utils.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function GamePage(_ref) {\n  _s();\n  let {\n    loggedInUser\n  } = _ref;\n  const {\n    wordLength\n  } = useParams();\n  const wordLengthVal = parseInt(wordLength);\n  const [randomWord, setRandomWord] = useState([]);\n  const [pinGuesses, setPinGuesses] = useState(Array(wordLengthVal).fill('')); // for the guesses\n  const [pinCodes, setPinCodes] = useState(Array(wordLengthVal).fill('')); //for the result\n  const [msg, setMsg] = useState(\"\");\n  const API_URL = `https://api.datamuse.com/words?sp=${\"?\".repeat(wordLengthVal)}&max=1000`;\n  const generateRandomWord = async () => {\n    try {\n      const response = await fetch(API_URL);\n      if (response.ok) {\n        const data = await response.json();\n        const randomIndex = Math.floor(Math.random() * data.length);\n        const randomWord = data[randomIndex].word; // Access the word property of the randomly selected index\n        setRandomWord(randomWord);\n        console.log(randomWord);\n      } else {\n        throw new Error('Failed to fetch random word');\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  // useEffect(() => {\n  //   generateRandomWord();\n  // },[]);\n\n  const handlePinCodeChange = _ref2 => {\n    let {\n      index,\n      event\n    } = _ref2;\n    const newPinCodes = [...pinCodes];\n    newPinCodes[index] = event.target.value;\n    setPinCodes(newPinCodes);\n    if (index < wordLengthVal - 1) {\n      event.target.nextSibling.focus();\n    }\n    if (newPinCodes[index] === randomWord[index]) {\n      setMsg('right!');\n    } else {\n      setMsg('wrong!');\n    }\n  };\n\n  // Keyboard Generator:\n\n  const Keyboard = _ref3 => {\n    let {\n      keys,\n      onKeyPress\n    } = _ref3;\n    const handleKeyPress = key => {\n      onKeyPress(key);\n    };\n    return /*#__PURE__*/_jsxDEV(Container, {\n      children: /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: loggedInUser ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"keyboard\",\n            children: keys.map(key => /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-primary m-2\",\n              onClick: () => handleKeyPress(key),\n              children: key\n            }, key, false, {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 9\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styleUtils.title,\n            children: /*#__PURE__*/_jsxDEV(\"h4\", {\n              children: \" Hangman :\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 42\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 8\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styleUtils.title,\n            children: /*#__PURE__*/_jsxDEV(\"h6\", {\n              children: \" Guesses left : \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 41\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styleUtils.pinCodeInput,\n            children: pinCodes.map((pinCode, index) => /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              className: styleUtils.pinInput,\n              maxLength: 1,\n              value: pinCode,\n              onChange: event => handlePinCodeChange({\n                index,\n                event\n              }),\n              tabIndex: index + 1 // Set the tabIndex to enable focusing with keyboard navigation\n              ,\n              autoFocus: index === 0 // Set autoFocus for the first input box\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 118,\n              columnNumber: 12\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n            className: styleUtils.center,\n            children: [\"Your guesses : \", pinCodes, \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n            className: styleUtils.center,\n            children: [\"Your Progress : \", msg, \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n            className: styleUtils.center,\n            children: [\"Random word : \", randomWord, \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styleUtils.generateButton\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 7\n          }, this)]\n        }, void 0, true) : /*#__PURE__*/_jsxDEV(GamePageLoggedOutView, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 9\n        }, this)\n      }, void 0, false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 5\n    }, this);\n  };\n}\n_s(GamePage, \"dvGcAh6d30HEDiEI1iEUiGWCUVQ=\", false, function () {\n  return [useParams];\n});\n_c = GamePage;\nvar _c;\n$RefreshReg$(_c, \"GamePage\");","map":{"version":3,"names":["React","useState","Container","useParams","GamePageLoggedOutView","styleUtils","jsxDEV","_jsxDEV","Fragment","_Fragment","GamePage","_ref","_s","loggedInUser","wordLength","wordLengthVal","parseInt","randomWord","setRandomWord","pinGuesses","setPinGuesses","Array","fill","pinCodes","setPinCodes","msg","setMsg","API_URL","repeat","generateRandomWord","response","fetch","ok","data","json","randomIndex","Math","floor","random","length","word","console","log","Error","error","handlePinCodeChange","_ref2","index","event","newPinCodes","target","value","nextSibling","focus","Keyboard","_ref3","keys","onKeyPress","handleKeyPress","key","children","className","map","onClick","fileName","_jsxFileName","lineNumber","columnNumber","title","pinCodeInput","pinCode","type","pinInput","maxLength","onChange","tabIndex","autoFocus","center","generateButton","_c","$RefreshReg$"],"sources":["/Users/zainabanidomi/Desktop/Hangman-Guessing-Game/frontend/src/pages/GamePage.tsx"],"sourcesContent":["import React, { useEffect, useState, } from 'react'\nimport { Button, Container } from 'react-bootstrap'\nimport { useParams } from 'react-router-dom';\nimport GamePageLoggedOutView from '../components/GamePageLoggedOutView'\nimport { HomePageProps } from '../components/types'\nimport styleUtils from '../styles/utils.module.css';\nimport Game from '../../../backend/src/model/game';\n\ninterface RouteParams {\n  wordLength: string;\n}\n\nexport default function GamePage({loggedInUser}:HomePageProps) {\n\n  const { wordLength } = useParams() as unknown as RouteParams;\n  const wordLengthVal = parseInt(wordLength);\n  const [randomWord, setRandomWord] = useState([]);\n  const [pinGuesses, setPinGuesses] = useState(Array(wordLengthVal).fill('')); // for the guesses\n  const [pinCodes, setPinCodes] = useState(Array(wordLengthVal).fill('')); //for the result\n  const [msg, setMsg] = useState(\"\");\n\n\n  const API_URL = `https://api.datamuse.com/words?sp=${\"?\".repeat(wordLengthVal)}&max=1000`;\n  \n  const generateRandomWord = async () => {\n\n    try {\n      const response = await fetch(API_URL);\n      if (response.ok) {\n        const data = await response.json();\n        const randomIndex = Math.floor(Math.random() * data.length);\n        const randomWord = data[randomIndex].word; // Access the word property of the randomly selected index\n        setRandomWord(randomWord);\n        console.log(randomWord);\n\n      } else {\n        throw new Error('Failed to fetch random word');\n      }\n\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  // useEffect(() => {\n  //   generateRandomWord();\n  // },[]);\n\n\n  const handlePinCodeChange = ({index, event}:any) => {\n\n    const newPinCodes = [...pinCodes];\n    newPinCodes[index] = event.target.value;\n    setPinCodes(newPinCodes);\n\n    if (index < wordLengthVal  - 1) {\n      event.target.nextSibling.focus();\n    }\n\n    if(newPinCodes[index] === randomWord[index]){\n      setMsg('right!');\n    }else{\n      setMsg('wrong!');\n    }\n    \n  };\n\n  // Keyboard Generator:\n\n  type KeyboardProps = {\n    keys: string[];\n    onKeyPress: (key: string) => void;\n  };\n\n const Keyboard: React.FC<KeyboardProps> = ({ keys, onKeyPress }) => {\n  const handleKeyPress = (key: string) => {\n    onKeyPress(key);\n  };\n\n  return (    \n\n    <Container >\n    <>\n    {\n      loggedInUser  \n      ?<>\n      <div className=\"keyboard\">\n      {keys.map((key) => (\n        <button\n          key={key}\n          className=\"btn btn-primary m-2\"\n          onClick={() => handleKeyPress(key)}\n        >\n          {key}\n        </button>\n      ))}\n    </div>\n     \n       <div className={styleUtils.title}><h4> Hangman :</h4></div>\n       {/* <div className={styleUtils.pinCodeInput}>\n      {pinGuesses.map((pinCode, index) => (\n           <input\n            key={index}\n            type=\"text\"\n            className={styleUtils.pinInput}\n            maxLength={1}\n            value={pinCode}\n            onChange={(event) => handlePinCodeChange({index, event})}\n            tabIndex={index + 1} // Set the tabIndex to enable focusing with keyboard navigation\n            autoFocus={index === 0} // Set autoFocus for the first input box\n          />\n        ))} \n      </div> */}\n\n      <div className={styleUtils.title}><h6> Guesses left : </h6></div>\n      <div className={styleUtils.pinCodeInput}>\n        {pinCodes.map((pinCode, index) => (\n           <input\n            key={index}\n            type=\"text\"\n            className={styleUtils.pinInput}\n            maxLength={1}\n            value={pinCode}\n            onChange={(event) => handlePinCodeChange({index, event})}\n            tabIndex={index + 1} // Set the tabIndex to enable focusing with keyboard navigation\n            autoFocus={index === 0} // Set autoFocus for the first input box\n\n          />\n        ))}\n      </div>\n\n      <h5 className={styleUtils.center}>Your guesses : {pinCodes} </h5>\n      <h5 className={styleUtils.center}>Your Progress : {msg} </h5>\n      <h5 className={styleUtils.center}>Random word : {randomWord} </h5>\n      \n      <div className={styleUtils.generateButton}>\n      {/* <Button \n      className={styleUtils.buttonStyle} \n       onClick={generateRandomWord}\n       > Generate\n      </Button> */}\n      </div>\n\n      </> \n      : <GamePageLoggedOutView /> \n    }\n    </>\n    </Container>\n  )\n}\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
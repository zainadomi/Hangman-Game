{"ast":null,"code":"var _jsxFileName = \"/Users/zainabanidomi/Desktop/Hangman-Guessing-Game/frontend/src/pages/GamePage.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Container } from 'react-bootstrap';\nimport { useParams } from 'react-router-dom';\nimport GamePageLoggedOutView from '../components/GamePageLoggedOutView';\nimport styleUtils from '../styles/utils.module.css';\nimport Figure from '../components/Figure';\nimport Word from '../components/Word';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nlet isActive = true;\nconst correctLetters = [];\nconst wrongLetters = [];\nexport default function GamePage(_ref) {\n  _s();\n  let {\n    loggedInUser\n  } = _ref;\n  const {\n    wordLength\n  } = useParams();\n  const wordLengthVal = parseInt(wordLength);\n  const [randomWord, setRandomWord] = useState([]);\n  // const [pinGuesses, setPinGuesses] = useState(Array(wordLengthVal).fill('')); // for the guesses\n  const [pinCodes, setPinCodes] = useState(Array(wordLengthVal).fill([])); //for the result\n  const [isActive, setIsActive] = useState(true);\n  const [correctLetters, setCorrectLetters] = useState([]);\n  const [worngLetters, setWrongLetters] = useState([]);\n  const API_URL = `https://api.datamuse.com/words?sp=${\"?\".repeat(wordLengthVal)}&max=1000`;\n  const generateRandomWord = async () => {\n    try {\n      const response = await fetch(API_URL);\n      if (response.ok) {\n        const data = await response.json();\n        const randomIndex = Math.floor(Math.random() * data.length);\n        const randomWord = data[randomIndex].word; // Access the word property of the randomly selected index\n        setRandomWord(randomWord);\n        console.log(randomWord);\n      } else {\n        throw new Error('Failed to fetch random word');\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  // useEffect(() => {\n  //   generateRandomWord();\n  // },[]);\n\n  // const handleCharSelect = (char: string, index: any) => {\n  //   const updatedPinCodes = [...pinCodes];\n  //   updatedPinCodes[index] = char;\n  //   setPinCodes(updatedPinCodes);\n  // };\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: loggedInUser ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: styleUtils.title,\n          children: /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \" Hangman \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 42\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 8\n        }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n          className: styleUtils.center,\n          children: \" Guess the word - Enter a letter \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 8\n        }, this), /*#__PURE__*/_jsxDEV(Figure, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 8\n        }, this), /*#__PURE__*/_jsxDEV(Word, {\n          selectedWord: randomWord,\n          correctLetters: correctLetters\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 8\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styleUtils.pinCodeInput,\n          children: pinCodes === null || pinCodes === void 0 ? void 0 : pinCodes.map((pinCode, index) => /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: styleUtils.pinInput,\n            maxLength: 1,\n            value: pinCode,\n            disabled: true\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 4\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styleUtils.title,\n          children: /*#__PURE__*/_jsxDEV(\"h6\", {\n            children: \" Guesses left : \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 41\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(GamePageLoggedOutView, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this)\n    }, void 0, false)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n}\n_s(GamePage, \"2lecdaz4+hwc2b20G2dKhGM0WPc=\", false, function () {\n  return [useParams];\n});\n_c = GamePage;\nvar _c;\n$RefreshReg$(_c, \"GamePage\");","map":{"version":3,"names":["React","useState","Container","useParams","GamePageLoggedOutView","styleUtils","Figure","Word","jsxDEV","_jsxDEV","Fragment","_Fragment","isActive","correctLetters","wrongLetters","GamePage","_ref","_s","loggedInUser","wordLength","wordLengthVal","parseInt","randomWord","setRandomWord","pinCodes","setPinCodes","Array","fill","setIsActive","setCorrectLetters","worngLetters","setWrongLetters","API_URL","repeat","generateRandomWord","response","fetch","ok","data","json","randomIndex","Math","floor","random","length","word","console","log","Error","error","children","className","title","fileName","_jsxFileName","lineNumber","columnNumber","center","selectedWord","pinCodeInput","map","pinCode","index","type","pinInput","maxLength","value","disabled","_c","$RefreshReg$"],"sources":["/Users/zainabanidomi/Desktop/Hangman-Guessing-Game/frontend/src/pages/GamePage.tsx"],"sourcesContent":["import React, { useEffect, useState, } from 'react'\nimport { Button, Container } from 'react-bootstrap'\nimport { useParams } from 'react-router-dom';\nimport GamePageLoggedOutView from '../components/GamePageLoggedOutView'\nimport { HomePageProps } from '../components/types'\nimport styleUtils from '../styles/utils.module.css';\nimport Alphabet from '../components/Alphabet';\nimport Figure from '../components/Figure';\nimport Word from '../components/Word';\n\n\ninterface RouteParams {\n  wordLength: string;\n}\n\nlet isActive = true;  \n  const correctLetters = [];\n  const wrongLetters = [];\n\nexport default function GamePage({loggedInUser}:HomePageProps) {\n\n  const { wordLength } = useParams() as unknown as RouteParams;\n  const wordLengthVal = parseInt(wordLength);\n  const [randomWord, setRandomWord] = useState([]);\n  // const [pinGuesses, setPinGuesses] = useState(Array(wordLengthVal).fill('')); // for the guesses\n  const [pinCodes, setPinCodes] = useState(Array(wordLengthVal).fill([])); //for the result\n  const [isActive,setIsActive] = useState(true);\n  const [correctLetters,setCorrectLetters]= useState([]);\n  const [worngLetters, setWrongLetters] = useState([]);\n  const API_URL = `https://api.datamuse.com/words?sp=${\"?\".repeat(wordLengthVal)}&max=1000`;\n  \n  const generateRandomWord = async () => {\n\n    try {\n      const response = await fetch(API_URL);\n      if (response.ok) {\n        const data = await response.json();\n        const randomIndex = Math.floor(Math.random() * data.length);\n        const randomWord = data[randomIndex].word; // Access the word property of the randomly selected index\n        setRandomWord(randomWord);\n        console.log(randomWord);\n\n      } else {\n        throw new Error('Failed to fetch random word');\n      }\n\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  // useEffect(() => {\n  //   generateRandomWord();\n  // },[]);\n\n\n \n  // const handleCharSelect = (char: string, index: any) => {\n  //   const updatedPinCodes = [...pinCodes];\n  //   updatedPinCodes[index] = char;\n  //   setPinCodes(updatedPinCodes);\n  // };\n  \n\n  return (    \n\n    <Container  >\n    <>\n    {\n      loggedInUser  \n      ?<>\n     \n       <div className={styleUtils.title}><h3> Hangman </h3></div>\n       <h5 className={styleUtils.center}> Guess the word - Enter a letter </h5>\n\n       < Figure />\n       <Word selectedWord={randomWord} correctLetters={correctLetters}/>\n\n      <div className={styleUtils.pinCodeInput}>\n\n{pinCodes?.map((pinCode,index) => (\n   <input\n    key={index}\n    type=\"text\"\n    className={styleUtils.pinInput}\n    maxLength={1}\n    value={pinCode} \n    disabled={true} \n    \n  />\n))}\n\n</div>\n      \n\n      <div className={styleUtils.title}><h6> Guesses left : </h6></div>\n\n\n {/* <Alphabet onCharSelect={(char: string,index?:number) => handleCharSelect(char,index)} /> */}\n      </> \n      : <GamePageLoggedOutView /> \n    }\n    </>\n    </Container>\n  )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
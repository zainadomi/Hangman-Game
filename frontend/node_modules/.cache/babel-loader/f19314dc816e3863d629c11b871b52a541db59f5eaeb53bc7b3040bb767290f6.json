{"ast":null,"code":"var _jsxFileName = \"/Users/zainabanidomi/Desktop/Hangman-Guessing-Game/frontend/src/pages/GamePage.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Button, Container } from 'react-bootstrap';\nimport { useParams } from 'react-router-dom';\nimport GamePageLoggedOutView from '../components/GamePageLoggedOutView';\nimport styleUtils from '../styles/utils.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function GamePage(_ref) {\n  _s();\n  let {\n    loggedInUser\n  } = _ref;\n  const {\n    wordLength\n  } = useParams();\n  const wordLengthVal = parseInt(wordLength);\n  const [randomWord, setRandomWord] = useState('');\n  const [pinCodes, setPinCodes] = useState(Array(wordLengthVal).fill(''));\n  const [msg, setMsg] = useState(\"\");\n\n  // const API_URL = `https://random-word-api.vercel.app/api?words=1&length=${wordLengthVal}`;\n\n  // const generateRandomWord = async () => {\n  //   try {\n  //     const response = await fetch(API_URL);\n  //     if (response.ok) {\n  //       const data = await response.json();\n  //       setRandomWord(data.word);\n  //       console.log(data);\n  //     } else {\n  //       throw new Error('Failed to fetch random word');\n  //     }\n  //   } catch (error) {\n  //     console.error(error);\n  //   }\n  // };\n  const generateRandomWord = () => {\n    const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n    let generatedWord = '';\n    for (let i = 0; i < wordLengthVal; i++) {\n      const randomIndex = Math.floor(Math.random() * alphabet.length);\n      generatedWord += alphabet[randomIndex];\n    }\n    setRandomWord(generatedWord);\n  };\n  const handlePinCodeChange = _ref2 => {\n    let {\n      index,\n      event\n    } = _ref2;\n    const newPinCodes = [...pinCodes];\n    newPinCodes[index] = event.target.value;\n    setPinCodes(newPinCodes);\n    if (index < wordLengthVal - 1) {\n      event.target.nextSibling.focus();\n    }\n    for (let i = 0; i < randomWord.length && i < userGuess.length; i++) {\n      if (pinCodes[i] === randomWord[i]) {\n        tempResults.push('Correct');\n      } else {\n        tempResults.push('Incorrect');\n      }\n    }\n    if (newPinCodes[index] === randomWord[index]) {\n      setMsg('right!');\n    } else {\n      setMsg('wrong!');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: loggedInUser ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: styleUtils.title,\n          children: /*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \" Please type your guesses :\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 42\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 8\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styleUtils.pinCodeInput,\n          children: pinCodes.map((pinCode, index) => /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: styleUtils.pinInput,\n            maxLength: 1,\n            value: pinCode,\n            onChange: event => handlePinCodeChange({\n              index,\n              event\n            }),\n            tabIndex: index + 1 // Set the tabIndex to enable focusing with keyboard navigation\n            ,\n            autoFocus: index === 0 // Set autoFocus for the first input box\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 12\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n          className: styleUtils.center,\n          children: [\"Your guesses : \", pinCodes, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n          className: styleUtils.center,\n          children: [\"Your Progress : \", msg, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n          className: styleUtils.center,\n          children: [\"Random word : \", randomWord, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styleUtils.generateButton,\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            className: styleUtils.buttonStyle,\n            onClick: generateRandomWord,\n            children: \" Generate\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 7\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(GamePageLoggedOutView, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this)\n    }, void 0, false)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n}\n_s(GamePage, \"gvleOQjKiAhjNdvwr78T2RIKnqE=\", false, function () {\n  return [useParams];\n});\n_c = GamePage;\nvar _c;\n$RefreshReg$(_c, \"GamePage\");","map":{"version":3,"names":["React","useState","Button","Container","useParams","GamePageLoggedOutView","styleUtils","jsxDEV","_jsxDEV","Fragment","_Fragment","GamePage","_ref","_s","loggedInUser","wordLength","wordLengthVal","parseInt","randomWord","setRandomWord","pinCodes","setPinCodes","Array","fill","msg","setMsg","generateRandomWord","alphabet","generatedWord","i","randomIndex","Math","floor","random","length","handlePinCodeChange","_ref2","index","event","newPinCodes","target","value","nextSibling","focus","userGuess","tempResults","push","children","className","title","fileName","_jsxFileName","lineNumber","columnNumber","pinCodeInput","map","pinCode","type","pinInput","maxLength","onChange","tabIndex","autoFocus","center","generateButton","buttonStyle","onClick","_c","$RefreshReg$"],"sources":["/Users/zainabanidomi/Desktop/Hangman-Guessing-Game/frontend/src/pages/GamePage.tsx"],"sourcesContent":["import React, { useState } from 'react'\nimport { Button, Container } from 'react-bootstrap'\nimport { useParams } from 'react-router-dom';\nimport GamePageLoggedOutView from '../components/GamePageLoggedOutView'\nimport { HomePageProps } from '../components/types'\nimport styleUtils from '../styles/utils.module.css';\n\n\n\nexport default function GamePage({loggedInUser}:HomePageProps) {\n\n  interface RouteParams {\n    wordLength: string;\n  }\n\n  const { wordLength } = useParams() as unknown as RouteParams;\n  const wordLengthVal = parseInt(wordLength);\n  const [randomWord, setRandomWord] = useState('');\n  const [pinCodes, setPinCodes] = useState(Array(wordLengthVal).fill(''));\n  const [msg, setMsg] = useState(\"\");\n\n\n  // const API_URL = `https://random-word-api.vercel.app/api?words=1&length=${wordLengthVal}`;\n  \n  \n  \n  // const generateRandomWord = async () => {\n  //   try {\n  //     const response = await fetch(API_URL);\n  //     if (response.ok) {\n  //       const data = await response.json();\n  //       setRandomWord(data.word);\n  //       console.log(data);\n  //     } else {\n  //       throw new Error('Failed to fetch random word');\n  //     }\n  //   } catch (error) {\n  //     console.error(error);\n  //   }\n  // };\n  const generateRandomWord = () => {\n    const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n    let generatedWord = '';\n    for (let i = 0; i < wordLengthVal; i++) {\n      const randomIndex = Math.floor(Math.random() * alphabet.length);\n      generatedWord += alphabet[randomIndex];\n    }\n    setRandomWord(generatedWord);\n  };\n\n  const handlePinCodeChange = ({index, event}:any) => {\n\n    const newPinCodes = [...pinCodes];\n    newPinCodes[index] = event.target.value;\n    setPinCodes(newPinCodes);\n\n    if (index < wordLengthVal  - 1) {\n      event.target.nextSibling.focus();\n    }\n    \n    for (let i = 0; i < randomWord.length && i < userGuess.length; i++) {\n      if (pinCodes[i] === randomWord[i]) {\n        tempResults.push('Correct');\n      } else {\n        tempResults.push('Incorrect');\n      }\n    }\n\n    if(newPinCodes[index] === randomWord[index]){\n      setMsg('right!');\n    }else{\n      setMsg('wrong!');\n    }\n    \n\n  };\n\n  return (    \n\n    <Container >\n    <>\n    {\n      loggedInUser  \n      ?<>\n       <div className={styleUtils.title}><h4> Please type your guesses :</h4></div>\n      <div className={styleUtils.pinCodeInput}>\n        \n        {pinCodes.map((pinCode, index) => (\n           <input\n            key={index}\n            type=\"text\"\n            className={styleUtils.pinInput}\n            maxLength={1}\n            value={pinCode}\n            onChange={(event) => handlePinCodeChange({index, event})}\n            tabIndex={index + 1} // Set the tabIndex to enable focusing with keyboard navigation\n            autoFocus={index === 0} // Set autoFocus for the first input box\n\n          />\n        ))}\n      </div>\n      <h5 className={styleUtils.center}>Your guesses : {pinCodes} </h5>\n      <h5 className={styleUtils.center}>Your Progress : {msg} </h5>\n      <h5 className={styleUtils.center}>Random word : {randomWord} </h5>\n      \n      <div className={styleUtils.generateButton}>\n      <Button \n      className={styleUtils.buttonStyle} \n       onClick={generateRandomWord}\n       > Generate\n      </Button>\n      </div>\n\n      </> \n      : <GamePageLoggedOutView /> \n    }\n    </>\n    </Container>\n  )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
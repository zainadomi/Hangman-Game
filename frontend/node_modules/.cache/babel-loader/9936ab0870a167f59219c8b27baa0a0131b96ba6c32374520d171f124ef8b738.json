{"ast":null,"code":"// import React, { useEffect, useState } from \"react\";\n// import { Button, Container } from \"react-bootstrap\";\n// import { useParams } from \"react-router-dom\";\n// import GamePageLoggedOutView from \"../components/GamePageLoggedOutView\";\n// import { HomePageProps } from \"../components/types\";\n// import styleUtils from \"../styles/utils.module.css\";\n// import Figure from \"../components/Figure\";\n// import Word from \"../components/Word\";\n// import WrongLetters from \"../components/WrongLetters\";\n\n// interface RouteParams {\n//   wordLength: string;\n// }\n\n// // interface Letter{\n// //   letter : string;\n// // }\n\n// // let isActive = true;\n// // const correctLetters = [];\n// // const wrongLetters = [];\n\n// export default function GamePage({ loggedInUser }: HomePageProps) {\n\n//   const { wordLength } = useParams() as unknown as RouteParams;\n//   const wordLengthVal = parseInt(wordLength);\n//   const [randomWord, setRandomWord] = useState([]);\n//   const [isActive, setIsActive] = useState(true);\n//   const [correctLetters, setCorrectLetters] = useState([]);\n//   const [wrongLetters, setWrongLetters] = useState([]);\n\n//   const API_URL = `https://api.datamuse.com/words?sp=${\"?\".repeat(wordLengthVal)}&max=1000`;\n\n//   const generateRandomWord = async () => {\n//     try {\n//       const response = await fetch(API_URL);\n//       if (response.ok) {\n//         const data = await response.json();\n//         const randomIndex = Math.floor(Math.random() * data.length);\n//         const randomWord = data[randomIndex].word; // Access the word property of the randomly selected index\n//         setRandomWord(randomWord);\n//         console.log(randomWord);\n//       } else {\n//         throw new Error(\"Failed to fetch random word\");\n//       }\n//     } catch (error) {\n//       console.error(error);\n//     }\n//   };\n\n//   useEffect(() => {\n//     generateRandomWord();\n//   }, []);\n\n//   useEffect(() => {\n//     const handleKeydown = (event:KeyboardEvent):any => {\n//       const { key, keyCode } = event;\n//       if (isActive && keyCode >= 65 && keyCode <= 90) {\n\n//         const letter= key.toLowerCase();\n//         if (randomWord.includes(letter)) {\n//           if (!correctLetters.includes(letter)) {\n//             setCorrectLetters(currentLetters => [...currentLetters, letter]);\n//           } else {\n//             // show(setShowNotification);\n//           }\n//         } else {\n//           if (!wrongLetters.includes(letter)) {\n//             setWrongLetters(currentLetters => [...currentLetters, letter]);\n//           } else {\n//             // show(setShowNotification);\n//           }\n//         }\n//       }\n//     }\n//     window.addEventListener('keydown', handleKeydown);\n\n//     return () => window.removeEventListener('keydown', handleKeydown);\n//   }, [correctLetters, wrongLetters, isActive]);\n\n//   return (\n//     <Container>\n//       <>\n//         {loggedInUser ? (\n//           <>\n//             <div className={styleUtils.gameContainer}>\n//               <div className={styleUtils.title}>\n//                 <h3> Hangman </h3>\n//               </div>\n//               <h5 className={styleUtils.center}>\n//                 {\" \"}\n//                 Guess the word - Enter a letter{\" \"}\n//               </h5>\n//               <Figure />\n//               <WrongLetters wrongLetters={wrongLetters}/>\n//               <div className={styleUtils.title}>\n//               <Word selectedWord={randomWord} correctLetters={correctLetters} />\n//                 {/* <h6> Guesses left : </h6> */}\n//               </div>\n//             </div>\n\n//             {/* <Alphabet onCharSelect={(char: string,index?:number) => handleCharSelect(char,index)} /> */}\n//           </>\n//         ) : (\n//           <GamePageLoggedOutView />\n//         )}\n//       </>\n//     </Container>\n//   );\n// }","map":{"version":3,"names":[],"sources":["/Users/zainabanidomi/Desktop/Hangman-Guessing-Game/frontend/src/pages/GamePage.tsx"],"sourcesContent":["// import React, { useEffect, useState } from \"react\";\n// import { Button, Container } from \"react-bootstrap\";\n// import { useParams } from \"react-router-dom\";\n// import GamePageLoggedOutView from \"../components/GamePageLoggedOutView\";\n// import { HomePageProps } from \"../components/types\";\n// import styleUtils from \"../styles/utils.module.css\";\n// import Figure from \"../components/Figure\";\n// import Word from \"../components/Word\";\n// import WrongLetters from \"../components/WrongLetters\";\n\n// interface RouteParams {\n//   wordLength: string;\n// }\n\n// // interface Letter{\n// //   letter : string;\n// // }\n\n// // let isActive = true;\n// // const correctLetters = [];\n// // const wrongLetters = [];\n\n// export default function GamePage({ loggedInUser }: HomePageProps) {\n  \n//   const { wordLength } = useParams() as unknown as RouteParams;\n//   const wordLengthVal = parseInt(wordLength);\n//   const [randomWord, setRandomWord] = useState([]);\n//   const [isActive, setIsActive] = useState(true);\n//   const [correctLetters, setCorrectLetters] = useState([]);\n//   const [wrongLetters, setWrongLetters] = useState([]);\n\n//   const API_URL = `https://api.datamuse.com/words?sp=${\"?\".repeat(wordLengthVal)}&max=1000`;\n\n//   const generateRandomWord = async () => {\n//     try {\n//       const response = await fetch(API_URL);\n//       if (response.ok) {\n//         const data = await response.json();\n//         const randomIndex = Math.floor(Math.random() * data.length);\n//         const randomWord = data[randomIndex].word; // Access the word property of the randomly selected index\n//         setRandomWord(randomWord);\n//         console.log(randomWord);\n//       } else {\n//         throw new Error(\"Failed to fetch random word\");\n//       }\n//     } catch (error) {\n//       console.error(error);\n//     }\n//   };\n\n//   useEffect(() => {\n//     generateRandomWord();\n//   }, []);\n\n\n//   useEffect(() => {\n//     const handleKeydown = (event:KeyboardEvent):any => {\n//       const { key, keyCode } = event;\n//       if (isActive && keyCode >= 65 && keyCode <= 90) {\n\n//         const letter= key.toLowerCase();\n//         if (randomWord.includes(letter)) {\n//           if (!correctLetters.includes(letter)) {\n//             setCorrectLetters(currentLetters => [...currentLetters, letter]);\n//           } else {\n//             // show(setShowNotification);\n//           }\n//         } else {\n//           if (!wrongLetters.includes(letter)) {\n//             setWrongLetters(currentLetters => [...currentLetters, letter]);\n//           } else {\n//             // show(setShowNotification);\n//           }\n//         }\n//       }\n//     }\n//     window.addEventListener('keydown', handleKeydown);\n\n//     return () => window.removeEventListener('keydown', handleKeydown);\n//   }, [correctLetters, wrongLetters, isActive]);\n\n\n\n//   return (\n//     <Container>\n//       <>\n//         {loggedInUser ? (\n//           <>\n//             <div className={styleUtils.gameContainer}>\n//               <div className={styleUtils.title}>\n//                 <h3> Hangman </h3>\n//               </div>\n//               <h5 className={styleUtils.center}>\n//                 {\" \"}\n//                 Guess the word - Enter a letter{\" \"}\n//               </h5>\n//               <Figure />\n//               <WrongLetters wrongLetters={wrongLetters}/>\n//               <div className={styleUtils.title}>\n//               <Word selectedWord={randomWord} correctLetters={correctLetters} />\n//                 {/* <h6> Guesses left : </h6> */}\n//               </div>\n//             </div>\n\n//             {/* <Alphabet onCharSelect={(char: string,index?:number) => handleCharSelect(char,index)} /> */}\n//           </>\n//         ) : (\n//           <GamePageLoggedOutView />\n//         )}\n//       </>\n//     </Container>\n//   );\n// }\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}